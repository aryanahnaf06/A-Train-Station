<<html>
<title>Assignment3 </title>
<canvas id="webglcanvas" width="500" height="500"></canvas>

<script>

    var canvas = document.getElementById("webglcanvas"); 
    var  gl = canvas.getContext("webgl");

    var vertexShaderSource =
       `attribute vec3 a_coords;
	    attribute vec3 a_colors;
	 	uniform mat4 u_RotY;
		uniform mat4 u_RotX;
		uniform mat4 u_Scale;
		varying vec3 v_color;
        
		void main() {
            gl_Position = u_Scale*u_RotX*u_RotY*vec4(a_coords, 1.0);
			v_color = a_colors;
        }`;

	var fragmentShaderSource =
       `precision mediump float;
        varying vec3 v_color;
        void main() {
            gl_FragColor = vec4(v_color, 1.0);
        }`;

    var vsh = gl.createShader( gl.VERTEX_SHADER );
    gl.shaderSource( vsh, vertexShaderSource );
    gl.compileShader( vsh );
	
    var fsh = gl.createShader( gl.FRAGMENT_SHADER );
    gl.shaderSource( fsh, fragmentShaderSource );
    gl.compileShader( fsh );
    
    var prog = gl.createProgram(); 
    
    gl.attachShader( prog, vsh ); 
    gl.attachShader( prog, fsh );
    gl.linkProgram( prog ); 
    gl.useProgram(prog); 

    var a_coords_location = gl.getAttribLocation(prog, "a_coords");

    var coords = new Float32Array( [
							   //340
								-0.5, +0.0, +0.0,
								+0.0, +0.0, +0.5,
								+0.0, +0.5, +0.0,
								//025
								+0.0, +0.5, +0.0,
								+0.5, +0.0, +0.0,
								+0.0, +0.0, -0.5,
								//420
								+0.0, +0.0, +0.5,
								+0.5, +0.0, +0.0,
								+0.0, +0.5, +0.0,
								//053
								+0.0, +0.5, +0.0,
								+0.0, +0.0, -0.5,
								-0.5, +0.0, +0.0,
								//143
								+0.0, -0.5, +0.0,
								+0.0, +0.0, +0.5,
								-0.5, +0.0, +0.0,
								//521
								+0.0, +0.0, -0.5,
								+0.5, +0.0, +0.0,
								+0.0, -0.5, +0.0,
								//124
								+0.0, -0.5, +0.0,
								+0.5, +0.0, +0.0,
								+0.0, +0.0, +0.5,
								//351
								-0.5, +0.0, +0.0,
								+0.0, +0.0, -0.5,
								+0.0, -0.5, +0.0,
								
									] );
	
    var a_coords_buffer = gl.createBuffer(); 
    gl.bindBuffer(gl.ARRAY_BUFFER, a_coords_buffer); 
    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW); 
    gl.vertexAttribPointer(a_coords_location, 3, gl.FLOAT, false, 0, 0); 
    gl.enableVertexAttribArray(a_coords_location);
	
	var u_shift_location = gl.getUniformLocation(prog, "u_shift");
	var shift = 0.0;
	gl.uniform1f(u_shift_location, shift);
	
	var a_colors_location = gl.getAttribLocation(prog, "a_colors");
    var colors = new Float32Array( [
									
									
									0.0, 1.0, 0.0, 
                                    0.0, 1.0, 0.0, 
                                    0.0, 1.0, 0.0, 
                                   
  								    1.0, 0.0, 0.0, 
                                    1.0, 0.0, 0.0, 
                                    1.0, 0.0, 0.0, 
                                    
									0.0, 0.0, 1.0, 
									0.0, 0.0, 1.0, 
									0.0, 0.0, 1.0, 
									
									1.0, 1.0, 0.0, 
									1.0, 1.0, 0.0, 
									1.0, 1.0, 0.0, 
									
									0.0, 1.0, 1.0, 
                                    0.0, 1.0, 1.0, 
                                    0.0, 1.0, 1.0, 
                                    
									1.0, 0.0, 1.0, 
									1.0, 0.0, 1.0, 
									1.0, 0.0, 1.0, 
									
									0.5, 0.0, 0.0, 
									0.5, 0.0, 0.0, 
									0.5, 0.0, 0.0, 
									
									0.0, 0.0, 0.5, 
									0.0, 0.0, 0.5, 
									0.0, 0.0, 0.5, 
									
									] );
	
	var a_colors_buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, a_colors_buffer);
    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
    gl.vertexAttribPointer(a_colors_location, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_colors_location);									
	
	var indices = new Uint8Array([
									0,1,2,      3,4,5,    
                                    6,7,8,      9,10,11,  
                                    12,13,14,   15,16,17, 
                                    18,19,20,   21,22,23, 
								]);
							
								
	var bufferInd = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInd);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
	
	var u_rotateY_location = gl.getUniformLocation(prog, "u_RotY");
	var thetaY = 65;
	var rad = thetaY*Math.PI/180;
    var rotateYMatrix = new Float32Array( [Math.cos(rad),  0.0,  -Math.sin(rad),  0.0,
										   0.0,            1.0,   0.0,            0.0,
                                           Math.sin(rad),  0.0,   Math.cos(rad),  0.0,
                                      	   0.0,            0.0,   0.0,            1.0] );
	
	gl.uniformMatrix4fv(u_rotateY_location, false, rotateYMatrix);

	var u_rotateX_location = gl.getUniformLocation(prog, "u_RotX");
	var thetaX = 0;
	var rad = thetaX*Math.PI/180;
    var rotateXMatrix = new Float32Array( [1.0,  0.0,            0.0,            0.0,
                                      	   0.0,  Math.cos(rad),  Math.sin(rad),  0.0,
                                     	   0.0, -Math.sin(rad),  Math.cos(rad),  0.0,
                                      	   0.0,  0.0,            0.0,            1.0] );
	gl.uniformMatrix4fv(u_rotateX_location, false, rotateXMatrix);
	
	u_scale_location = gl.getUniformLocation(prog, "u_Scale");
	var Sx = 1.0;
	var Sy = 1.0;
	var Sz = 1.0;
	var scaleMatrix = new Float32Array( [Sx,   0.0,  0.0,  0.0,
                                      	 0.0,  Sy,   0.0,  0.0,
                                     	 0.0,  0.0,  Sz,   0.0,
                                      	 0.0,  0.0,  0.0,  1.0] );
										 
	gl.uniformMatrix4fv(u_scale_location, false, scaleMatrix);
	
	
	gl.clearColor(1.0, 1.0, 1.0, 1.0);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	gl.drawElements(gl.TRIANGLES, 3*8, gl.UNSIGNED_BYTE, 0);
	
	document.onkeyup = function (event) {
			if (event.key == 'ArrowDown') {
				thetaX = thetaX +5;
				var rad = thetaX*Math.PI/180;
				var rotateXMatrix = new Float32Array( [1.0,  0.0,            0.0,            0.0,
                                      	   0.0,  Math.cos(rad),  Math.sin(rad),  0.0,
                                     	   0.0, -Math.sin(rad),  Math.cos(rad),  0.0,
                                      	   0.0,  0.0,            0.0,            1.0] );
				gl.uniformMatrix4fv(u_rotateX_location, false, rotateXMatrix);
	
			}else if (event.key == 'ArrowUp') {
				thetaX = thetaX -5;
				var rad = thetaX*Math.PI/180;
				var rotateXMatrix = new Float32Array( [1.0,  0.0,            0.0,            0.0,
                                      	   0.0,  Math.cos(rad),  Math.sin(rad),  0.0,
                                     	   0.0, -Math.sin(rad),  Math.cos(rad),  0.0,
                                      	   0.0,  0.0,            0.0,            1.0] );
				gl.uniformMatrix4fv(u_rotateX_location, false, rotateXMatrix);
	
			}else if (event.key == 'ArrowLeft') {
				thetaY = thetaY - 5;
				var rad = thetaY*Math.PI/180;
				var rotateYMatrix = new Float32Array( [Math.cos(rad),  0.0,  -Math.sin(rad),  0.0,
										   0.0,            1.0,   0.0,            0.0,
                                           Math.sin(rad),  0.0,   Math.cos(rad),  0.0,
                                      	   0.0,            0.0,   0.0,            1.0] );
	
				gl.uniformMatrix4fv(u_rotateY_location, false, rotateYMatrix);

			}else if (event.key == 'ArrowRight') {
				thetaY = thetaY + 5;
				var rad = thetaY*Math.PI/180;
				var rotateYMatrix = new Float32Array( [Math.cos(rad),  0.0,  -Math.sin(rad),  0.0,
										   0.0,            1.0,   0.0,            0.0,
                                           Math.sin(rad),  0.0,   Math.cos(rad),  0.0,
                                      	   0.0,            0.0,   0.0,            1.0] );
	
				gl.uniformMatrix4fv(u_rotateY_location, false, rotateYMatrix);
			}else if (event.key == 'a') {
				Sx = Sx + 0.02;
				Sy = Sy + 0.02;
				Sz = Sz + 0.02;
				var scaleMatrix = new Float32Array( [Sx,   0.0,  0.0,  0.0,
													 0.0,  Sy,   0.0,  0.0,
													 0.0,  0.0,  Sz,   0.0,
													 0.0,  0.0,  0.0,  1.0] );
													 
				gl.uniformMatrix4fv(u_scale_location, false, scaleMatrix);
				
			}else if (event.key == 's') {
				Sx = Sx - 0.02;
				Sy = Sy - 0.02;
				Sz = Sz - 0.02;
				var scaleMatrix = new Float32Array( [Sx,   0.0,  0.0,  0.0,
													 0.0,  Sy,   0.0,  0.0,
													 0.0,  0.0,  Sz,   0.0,
													 0.0,  0.0,  0.0,  1.0] );
													 
				gl.uniformMatrix4fv(u_scale_location, false, scaleMatrix);
				
			}
			gl.clearColor(1.0, 1.0, 1.0, 1.0);
			gl.enable(gl.DEPTH_TEST);
			gl.enable(gl.CULL_FACE);
			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			gl.drawElements(gl.TRIANGLES, 3*8, gl.UNSIGNED_BYTE, 0);
	
		};
	
	
	

</script>



</html>
