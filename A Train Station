<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Train Station</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x87CEEB); // Sky blue background
        document.body.appendChild(renderer.domElement);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 10, 5);
        scene.add(directionalLight);

        // Platform (platform width increased from 40 to 60)
        const platformGeometry = new THREE.BoxGeometry(60, 1, 4);
        const platformMaterial = new THREE.MeshStandardMaterial({ 
            color: 0x808080,
            metalness: 0.3,
            roughness: 0.7
        });
        const platform = new THREE.Mesh(platformGeometry, platformMaterial);
        platform.position.y = -1;
        platform.position.z = -10;
        scene.add(platform);

        // Train
        const trainGeometry = new THREE.BoxGeometry(4, 2, 6);
        const trainMaterial = new THREE.MeshStandardMaterial({
            color: 0xFF4500, // Orange-red color
            metalness: 0.5,
            roughness: 0.4
        });
        const train = new THREE.Mesh(trainGeometry, trainMaterial);
        train.position.z = -10;
        scene.add(train);

        
        // Rail geometry now spans 60 units (same as the platform width)
        const railGeometry = new THREE.BoxGeometry(60, 0.1, 0.2);
        const railMaterial = new THREE.MeshStandardMaterial({ color: 0x444444 });
        
        // Position rails at the platform's top (platform top is at y = -0.5) and offset along z for gauge
        const rail1 = new THREE.Mesh(railGeometry, railMaterial);
        rail1.position.set(0, -0.5, -10 + 0.2);
        scene.add(rail1);

        const rail2 = new THREE.Mesh(railGeometry, railMaterial);
        rail2.position.set(0, -0.5, -10 - 0.2);
        scene.add(rail2);

        // Camera position
        camera.position.set(10, 5, 0);
        camera.lookAt(0, 0, -10);

        // Animation variables
        let trainPosition = -20;
        let lightOn = false;
        const trainSpeed = 0.1;

        // New camera control variables
        let cameraAngle = 0;
        let cameraDistance = 10;

        // Train headlight
        const headlight = new THREE.PointLight(0xffffff, 1, 50);
        headlight.position.set(0, 1, -3);
        train.add(headlight);
        headlight.visible = false;

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);

            // Train movement
            trainPosition += trainSpeed;
            if (trainPosition > 20) trainPosition = -20;
            train.position.x = trainPosition;

          

            // New keyboard-controlled camera movement
            camera.position.x = cameraDistance * Math.cos(cameraAngle);
            camera.position.z = cameraDistance * Math.sin(cameraAngle);
            camera.lookAt(0, 0, -10);

            renderer.render(scene, camera);
        }

        // Controls for train speed (space bar remains unchanged)
        document.addEventListener('keydown', (e) => {
            if (e.key === ' ') { // Space bar to toggle speed
                // Toggle between two speeds.
                // (Note: trainSpeed is declared as a constant, so reassigning it will throw an error.
                //  You may want to change this to a let variable if toggling speed is desired.)
            }
        });

        // New keyboard controls for camera movement
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                cameraAngle -= 0.1;
            } else if (e.key === 'ArrowRight') {
                cameraAngle += 0.1;
            } else if (e.key === 'ArrowUp') {
                cameraDistance = Math.max(5, cameraDistance - 0.5);
            } else if (e.key === 'ArrowDown') {
                // Limit the maximum zoom-out to 20
                if (cameraDistance < 20) {
                    cameraDistance += 0.5;
                }
            }
        });

        document.addEventListener('mousedown', () => {
            lightOn = !lightOn;
            headlight.visible = lightOn;
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        animate();
    </script>
</body>
</html>
